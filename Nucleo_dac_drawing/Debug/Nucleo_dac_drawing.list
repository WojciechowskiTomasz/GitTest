
Nucleo_dac_drawing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000188c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a50  08001a50  00011a50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000009d4  20000000  08001a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000010ec  200009d4  0800244c  000209d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001ac0  0800244c  00021ac0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000209d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e9c4  00000000  00000000  00020a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002487  00000000  00000000  0002f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006557  00000000  00000000  0003184f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000958  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c20  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004eb4  00000000  00000000  00039320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f97  00000000  00000000  0003e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004216b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b44  00000000  00000000  000421e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200009d4 	.word	0x200009d4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001a38 	.word	0x08001a38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200009d8 	.word	0x200009d8
 8000200:	08001a38 	.word	0x08001a38

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f896 	bl	800065c <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 f84a 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	200009d0 	.word	0x200009d0
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f81b 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 f87a 	bl	800167c <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000a08 	.word	0x20000a08
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000a08 	.word	0x20000a08

080005b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c4:	0200      	lsls	r0, r0, #8
 80005c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	68dc      	ldr	r4, [r3, #12]
 80005de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	bf28      	it	cs
 80005ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	f04f 0501 	mov.w	r5, #1
 80005f4:	fa05 f303 	lsl.w	r3, r5, r3
 80005f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fc:	bf8c      	ite	hi
 80005fe:	3c03      	subhi	r4, #3
 8000600:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000602:	4019      	ands	r1, r3
 8000604:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000606:	fa05 f404 	lsl.w	r4, r5, r4
 800060a:	3c01      	subs	r4, #1
 800060c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800060e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	ea42 0201 	orr.w	r2, r2, r1
 8000614:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	bfad      	iteet	ge
 800061a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	f000 000f 	andlt.w	r0, r0, #15
 8000622:	4b06      	ldrlt	r3, [pc, #24]	; (800063c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfb5      	itete	lt
 800062a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	e000ed14 	.word	0xe000ed14

08000640 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000640:	2800      	cmp	r0, #0
 8000642:	db08      	blt.n	8000656 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000644:	0942      	lsrs	r2, r0, #5
 8000646:	2301      	movs	r3, #1
 8000648:	f000 001f 	and.w	r0, r0, #31
 800064c:	fa03 f000 	lsl.w	r0, r3, r0
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <HAL_NVIC_EnableIRQ+0x18>)
 8000652:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100

0800065c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	3801      	subs	r0, #1
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d20a      	bcs.n	800067a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000668:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	21f0      	movs	r1, #240	; 0xf0
 800066c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800067a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000688:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800068a:	4604      	mov	r4, r0
 800068c:	b168      	cbz	r0, 80006aa <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800068e:	7903      	ldrb	r3, [r0, #4]
 8000690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000694:	b913      	cbnz	r3, 800069c <HAL_DAC_Init+0x14>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000696:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000698:	f001 f810 	bl	80016bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800069c:	2302      	movs	r3, #2
 800069e:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80006a0:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80006a2:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80006a4:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80006a6:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80006a8:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
}
 80006ac:	bd10      	pop	{r4, pc}

080006ae <HAL_DAC_Start>:
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80006ae:	7943      	ldrb	r3, [r0, #5]
 80006b0:	2b01      	cmp	r3, #1
{
 80006b2:	b510      	push	{r4, lr}
 80006b4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80006b8:	d018      	beq.n	80006ec <HAL_DAC_Start+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80006ba:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80006bc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 80006be:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80006c0:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 80006c2:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80006c4:	408a      	lsls	r2, r1
 80006c6:	4322      	orrs	r2, r4
 80006c8:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80006ca:	b989      	cbnz	r1, 80006f0 <HAL_DAC_Start+0x42>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80006cc:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80006ce:	681a      	ldr	r2, [r3, #0]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80006d0:	074c      	lsls	r4, r1, #29
 80006d2:	d507      	bpl.n	80006e4 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80006d4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80006d8:	2a38      	cmp	r2, #56	; 0x38
 80006da:	d103      	bne.n	80006e4 <HAL_DAC_Start+0x36>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	f042 0201 	orr.w	r2, r2, #1
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80006e2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80006e4:	2301      	movs	r3, #1
 80006e6:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80006e8:	2300      	movs	r3, #0
 80006ea:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80006ec:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 80006ee:	bd10      	pop	{r4, pc}
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80006f0:	6819      	ldr	r1, [r3, #0]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80006f2:	681a      	ldr	r2, [r3, #0]
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80006f4:	0349      	lsls	r1, r1, #13
 80006f6:	d5f5      	bpl.n	80006e4 <HAL_DAC_Start+0x36>
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80006f8:	f402 1260 	and.w	r2, r2, #3670016	; 0x380000
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80006fc:	f5b2 1f60 	cmp.w	r2, #3670016	; 0x380000
 8000700:	d1f0      	bne.n	80006e4 <HAL_DAC_Start+0x36>
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	f042 0202 	orr.w	r2, r2, #2
 8000708:	e7eb      	b.n	80006e2 <HAL_DAC_Start+0x34>

0800070a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800070a:	4770      	bx	lr

0800070c <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800070c:	6803      	ldr	r3, [r0, #0]
 800070e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000710:	0491      	lsls	r1, r2, #18
{
 8000712:	b510      	push	{r4, lr}
 8000714:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000716:	d50e      	bpl.n	8000736 <HAL_DAC_IRQHandler+0x2a>
    hdac->State = HAL_DAC_STATE_ERROR;
 8000718:	2204      	movs	r2, #4
 800071a:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800071c:	6902      	ldr	r2, [r0, #16]
 800071e:	f042 0201 	orr.w	r2, r2, #1
 8000722:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8000724:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000730:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000732:	f7ff ffea 	bl	800070a <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	d511      	bpl.n	8000762 <HAL_DAC_IRQHandler+0x56>
    hdac->State = HAL_DAC_STATE_ERROR;
 800073e:	2204      	movs	r2, #4
 8000740:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8000742:	6922      	ldr	r2, [r4, #16]
 8000744:	f042 0202 	orr.w	r2, r2, #2
 8000748:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800074a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000756:	4620      	mov	r0, r4
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800075e:	f000 b833 	b.w	80007c8 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8000762:	bd10      	pop	{r4, pc}

08000764 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000764:	7943      	ldrb	r3, [r0, #5]
 8000766:	2b01      	cmp	r3, #1
{
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800076e:	d017      	beq.n	80007a0 <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000770:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000772:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000774:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000776:	f640 75fe 	movw	r5, #4094	; 0xffe
 800077a:	4095      	lsls	r5, r2
 800077c:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000780:	c90a      	ldmia	r1, {r1, r3}
 8000782:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000784:	4093      	lsls	r3, r2
 8000786:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000788:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	21c0      	movs	r1, #192	; 0xc0
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000796:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000798:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800079a:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800079c:	2300      	movs	r3, #0
 800079e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80007a0:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 80007a2:	bd30      	pop	{r4, r5, pc}

080007a4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80007a4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 80007a6:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80007a8:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 80007aa:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance; 
 80007ac:	9001      	str	r0, [sp, #4]
  if(Channel == DAC_CHANNEL_1)
 80007ae:	b941      	cbnz	r1, 80007c2 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80007b0:	9901      	ldr	r1, [sp, #4]
 80007b2:	3108      	adds	r1, #8
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80007b4:	440a      	add	r2, r1
 80007b6:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80007b8:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 80007ba:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	b002      	add	sp, #8
 80007c0:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80007c2:	9901      	ldr	r1, [sp, #4]
 80007c4:	3114      	adds	r1, #20
 80007c6:	e7f5      	b.n	80007b4 <HAL_DAC_SetValue+0x10>

080007c8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80007c8:	4770      	bx	lr
	...

080007cc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80007cc:	6803      	ldr	r3, [r0, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80007d4:	f023 0303 	bic.w	r3, r3, #3
 80007d8:	2118      	movs	r1, #24
 80007da:	3a10      	subs	r2, #16
 80007dc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80007e2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80007e4:	bf88      	it	hi
 80007e6:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007e8:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80007ea:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80007ec:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80007ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	08001a50 	.word	0x08001a50

080007f8 <HAL_DMA_Init>:
{
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff fed4 	bl	80005a8 <HAL_GetTick>
 8000800:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000802:	2c00      	cmp	r4, #0
 8000804:	d071      	beq.n	80008ea <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000806:	2300      	movs	r3, #0
 8000808:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800080c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800080e:	2302      	movs	r3, #2
 8000810:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000814:	6813      	ldr	r3, [r2, #0]
 8000816:	f023 0301 	bic.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800081c:	6821      	ldr	r1, [r4, #0]
 800081e:	680b      	ldr	r3, [r1, #0]
 8000820:	07d8      	lsls	r0, r3, #31
 8000822:	d43c      	bmi.n	800089e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000824:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000826:	4d32      	ldr	r5, [pc, #200]	; (80008f0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000828:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800082a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800082c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800082e:	68a3      	ldr	r3, [r4, #8]
 8000830:	4313      	orrs	r3, r2
 8000832:	68e2      	ldr	r2, [r4, #12]
 8000834:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000836:	6922      	ldr	r2, [r4, #16]
 8000838:	4313      	orrs	r3, r2
 800083a:	6962      	ldr	r2, [r4, #20]
 800083c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800083e:	69e2      	ldr	r2, [r4, #28]
 8000840:	4303      	orrs	r3, r0
 8000842:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000844:	6a22      	ldr	r2, [r4, #32]
 8000846:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800084a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800084c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000850:	bf01      	itttt	eq
 8000852:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000854:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000856:	4335      	orreq	r5, r6
 8000858:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800085a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800085c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800085e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000860:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000864:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000868:	d10b      	bne.n	8000882 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800086a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800086c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800086e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000870:	b13d      	cbz	r5, 8000882 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000872:	b9f8      	cbnz	r0, 80008b4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000874:	2a01      	cmp	r2, #1
 8000876:	d02d      	beq.n	80008d4 <HAL_DMA_Init+0xdc>
 8000878:	d301      	bcc.n	800087e <HAL_DMA_Init+0x86>
 800087a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800087c:	d101      	bne.n	8000882 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800087e:	01ea      	lsls	r2, r5, #7
 8000880:	d42b      	bmi.n	80008da <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000882:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000884:	4620      	mov	r0, r4
 8000886:	f7ff ffa1 	bl	80007cc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800088a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800088c:	233f      	movs	r3, #63	; 0x3f
 800088e:	4093      	lsls	r3, r2
 8000890:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000892:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000894:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000896:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000898:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800089c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800089e:	f7ff fe83 	bl	80005a8 <HAL_GetTick>
 80008a2:	1b40      	subs	r0, r0, r5
 80008a4:	2805      	cmp	r0, #5
 80008a6:	d9b9      	bls.n	800081c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008a8:	2320      	movs	r3, #32
 80008aa:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008ac:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80008ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80008b4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80008b8:	d113      	bne.n	80008e2 <HAL_DMA_Init+0xea>
    switch (tmp)
 80008ba:	2a03      	cmp	r2, #3
 80008bc:	d8e1      	bhi.n	8000882 <HAL_DMA_Init+0x8a>
 80008be:	a001      	add	r0, pc, #4	; (adr r0, 80008c4 <HAL_DMA_Init+0xcc>)
 80008c0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80008c4:	080008db 	.word	0x080008db
 80008c8:	0800087f 	.word	0x0800087f
 80008cc:	080008db 	.word	0x080008db
 80008d0:	080008d5 	.word	0x080008d5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80008d4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80008d8:	d1d3      	bne.n	8000882 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80008de:	2001      	movs	r0, #1
 80008e0:	e7e5      	b.n	80008ae <HAL_DMA_Init+0xb6>
    switch (tmp)
 80008e2:	2a02      	cmp	r2, #2
 80008e4:	d9f9      	bls.n	80008da <HAL_DMA_Init+0xe2>
 80008e6:	2a03      	cmp	r2, #3
 80008e8:	e7c8      	b.n	800087c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80008ea:	2001      	movs	r0, #1
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	bf00      	nop
 80008f0:	f010803f 	.word	0xf010803f

080008f4 <HAL_DMA_IRQHandler>:
{
 80008f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80008fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80008fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000900:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000902:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000904:	2208      	movs	r2, #8
 8000906:	409a      	lsls	r2, r3
 8000908:	4216      	tst	r6, r2
{
 800090a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800090c:	d00c      	beq.n	8000928 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800090e:	6801      	ldr	r1, [r0, #0]
 8000910:	6808      	ldr	r0, [r1, #0]
 8000912:	0740      	lsls	r0, r0, #29
 8000914:	d508      	bpl.n	8000928 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000916:	6808      	ldr	r0, [r1, #0]
 8000918:	f020 0004 	bic.w	r0, r0, #4
 800091c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800091e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000920:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000928:	2201      	movs	r2, #1
 800092a:	409a      	lsls	r2, r3
 800092c:	4216      	tst	r6, r2
 800092e:	d008      	beq.n	8000942 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000930:	6821      	ldr	r1, [r4, #0]
 8000932:	6949      	ldr	r1, [r1, #20]
 8000934:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000936:	bf41      	itttt	mi
 8000938:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800093a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800093c:	f042 0202 	orrmi.w	r2, r2, #2
 8000940:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000942:	2204      	movs	r2, #4
 8000944:	409a      	lsls	r2, r3
 8000946:	4216      	tst	r6, r2
 8000948:	d008      	beq.n	800095c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800094a:	6821      	ldr	r1, [r4, #0]
 800094c:	6809      	ldr	r1, [r1, #0]
 800094e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000950:	bf41      	itttt	mi
 8000952:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000954:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000956:	f042 0204 	orrmi.w	r2, r2, #4
 800095a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800095c:	2210      	movs	r2, #16
 800095e:	409a      	lsls	r2, r3
 8000960:	4216      	tst	r6, r2
 8000962:	d010      	beq.n	8000986 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	0709      	lsls	r1, r1, #28
 800096a:	d50c      	bpl.n	8000986 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800096c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	0350      	lsls	r0, r2, #13
 8000972:	d535      	bpl.n	80009e0 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	0319      	lsls	r1, r3, #12
 8000978:	d401      	bmi.n	800097e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800097a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800097c:	e000      	b.n	8000980 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800097e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000980:	b10b      	cbz	r3, 8000986 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000982:	4620      	mov	r0, r4
 8000984:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000986:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000988:	2220      	movs	r2, #32
 800098a:	408a      	lsls	r2, r1
 800098c:	4216      	tst	r6, r2
 800098e:	d038      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	06c6      	lsls	r6, r0, #27
 8000996:	d534      	bpl.n	8000a02 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000998:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800099a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800099e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009a2:	d125      	bne.n	80009f0 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009a4:	f022 0216 	bic.w	r2, r2, #22
 80009a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009aa:	695a      	ldr	r2, [r3, #20]
 80009ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009b0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009b4:	b90a      	cbnz	r2, 80009ba <HAL_DMA_IRQHandler+0xc6>
 80009b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009b8:	b11a      	cbz	r2, 80009c2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f022 0208 	bic.w	r2, r2, #8
 80009c0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c2:	233f      	movs	r3, #63	; 0x3f
 80009c4:	408b      	lsls	r3, r1
 80009c6:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80009c8:	2300      	movs	r3, #0
 80009ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80009d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80009d6:	b10b      	cbz	r3, 80009dc <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80009d8:	4620      	mov	r0, r4
 80009da:	4798      	blx	r3
}
 80009dc:	b003      	add	sp, #12
 80009de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009e4:	bf5e      	ittt	pl
 80009e6:	681a      	ldrpl	r2, [r3, #0]
 80009e8:	f022 0208 	bicpl.w	r2, r2, #8
 80009ec:	601a      	strpl	r2, [r3, #0]
 80009ee:	e7c4      	b.n	800097a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009f0:	0350      	lsls	r0, r2, #13
 80009f2:	d528      	bpl.n	8000a46 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0319      	lsls	r1, r3, #12
 80009f8:	d432      	bmi.n	8000a60 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80009fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80009fc:	b10b      	cbz	r3, 8000a02 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80009fe:	4620      	mov	r0, r4
 8000a00:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0e9      	beq.n	80009dc <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a0a:	07da      	lsls	r2, r3, #31
 8000a0c:	d519      	bpl.n	8000a42 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a0e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000a10:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	f023 0301 	bic.w	r3, r3, #1
 8000a1c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a22:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	429f      	cmp	r7, r3
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	d302      	bcc.n	8000a36 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	07db      	lsls	r3, r3, #31
 8000a34:	d4f7      	bmi.n	8000a26 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000a36:	2300      	movs	r3, #0
 8000a38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000a42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a44:	e7c7      	b.n	80009d6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000a4c:	d108      	bne.n	8000a60 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	f021 0110 	bic.w	r1, r1, #16
 8000a54:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000a56:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000a58:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a62:	e7cb      	b.n	80009fc <HAL_DMA_IRQHandler+0x108>
 8000a64:	200009d0 	.word	0x200009d0

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a6c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a70:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000c14 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a74:	4a65      	ldr	r2, [pc, #404]	; (8000c0c <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a76:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000c18 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a7c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a7e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a82:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a84:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a88:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a8c:	45b6      	cmp	lr, r6
 8000a8e:	f040 80aa 	bne.w	8000be6 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a92:	684c      	ldr	r4, [r1, #4]
 8000a94:	f024 0710 	bic.w	r7, r4, #16
 8000a98:	2f02      	cmp	r7, #2
 8000a9a:	d116      	bne.n	8000aca <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a9c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000aa0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aa4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000aa8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ab0:	f04f 0c0f 	mov.w	ip, #15
 8000ab4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ab8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000abc:	690d      	ldr	r5, [r1, #16]
 8000abe:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ac2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ac6:	f8ca 5020 	str.w	r5, [sl, #32]
 8000aca:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ace:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ad0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ad4:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ad8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ada:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ade:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ae8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aec:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000aee:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af2:	d811      	bhi.n	8000b18 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000af4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000af6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000afa:	68cf      	ldr	r7, [r1, #12]
 8000afc:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000b00:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b04:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b06:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b08:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b0c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b10:	409f      	lsls	r7, r3
 8000b12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b16:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b18:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b1a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1c:	688f      	ldr	r7, [r1, #8]
 8000b1e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000b22:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b24:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b26:	00e5      	lsls	r5, r4, #3
 8000b28:	d55d      	bpl.n	8000be6 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	f04f 0b00 	mov.w	fp, #0
 8000b2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b32:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b36:	4d36      	ldr	r5, [pc, #216]	; (8000c10 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b3c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b40:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b44:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b48:	9703      	str	r7, [sp, #12]
 8000b4a:	9f03      	ldr	r7, [sp, #12]
 8000b4c:	f023 0703 	bic.w	r7, r3, #3
 8000b50:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b54:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b58:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b5c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b60:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b64:	f04f 0e0f 	mov.w	lr, #15
 8000b68:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b6c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b6e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b72:	d03f      	beq.n	8000bf4 <HAL_GPIO_Init+0x18c>
 8000b74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b78:	42a8      	cmp	r0, r5
 8000b7a:	d03d      	beq.n	8000bf8 <HAL_GPIO_Init+0x190>
 8000b7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b80:	42a8      	cmp	r0, r5
 8000b82:	d03b      	beq.n	8000bfc <HAL_GPIO_Init+0x194>
 8000b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b88:	42a8      	cmp	r0, r5
 8000b8a:	d039      	beq.n	8000c00 <HAL_GPIO_Init+0x198>
 8000b8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b90:	42a8      	cmp	r0, r5
 8000b92:	d037      	beq.n	8000c04 <HAL_GPIO_Init+0x19c>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d037      	beq.n	8000c08 <HAL_GPIO_Init+0x1a0>
 8000b98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b9c:	42a8      	cmp	r0, r5
 8000b9e:	bf14      	ite	ne
 8000ba0:	2507      	movne	r5, #7
 8000ba2:	2506      	moveq	r5, #6
 8000ba4:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ba8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bac:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000bae:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	bf0c      	ite	eq
 8000bb8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bba:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000bbc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000bbe:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bc0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	bf0c      	ite	eq
 8000bc6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bc8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bca:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bcc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bce:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bd2:	bf0c      	ite	eq
 8000bd4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bd6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000bd8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000bda:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bdc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bde:	bf54      	ite	pl
 8000be0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000be2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000be4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be6:	3301      	adds	r3, #1
 8000be8:	2b10      	cmp	r3, #16
 8000bea:	f47f af48 	bne.w	8000a7e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bee:	b005      	add	sp, #20
 8000bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf4:	465d      	mov	r5, fp
 8000bf6:	e7d5      	b.n	8000ba4 <HAL_GPIO_Init+0x13c>
 8000bf8:	2501      	movs	r5, #1
 8000bfa:	e7d3      	b.n	8000ba4 <HAL_GPIO_Init+0x13c>
 8000bfc:	2502      	movs	r5, #2
 8000bfe:	e7d1      	b.n	8000ba4 <HAL_GPIO_Init+0x13c>
 8000c00:	2503      	movs	r5, #3
 8000c02:	e7cf      	b.n	8000ba4 <HAL_GPIO_Init+0x13c>
 8000c04:	2504      	movs	r5, #4
 8000c06:	e7cd      	b.n	8000ba4 <HAL_GPIO_Init+0x13c>
 8000c08:	2505      	movs	r5, #5
 8000c0a:	e7cb      	b.n	8000ba4 <HAL_GPIO_Init+0x13c>
 8000c0c:	40013c00 	.word	0x40013c00
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40021400 	.word	0x40021400

08000c1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c1c:	6903      	ldr	r3, [r0, #16]
 8000c1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000c20:	bf14      	ite	ne
 8000c22:	2001      	movne	r0, #1
 8000c24:	2000      	moveq	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c28:	b10a      	cbz	r2, 8000c2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c2a:	6181      	str	r1, [r0, #24]
 8000c2c:	4770      	bx	lr
 8000c2e:	0409      	lsls	r1, r1, #16
 8000c30:	e7fb      	b.n	8000c2a <HAL_GPIO_WritePin+0x2>

08000c32 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c32:	6943      	ldr	r3, [r0, #20]
 8000c34:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c38:	bf08      	it	eq
 8000c3a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c3c:	6181      	str	r1, [r0, #24]
 8000c3e:	4770      	bx	lr

08000c40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c48:	4c18      	ldr	r4, [pc, #96]	; (8000cac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_PWREx_EnableOverDrive+0x70>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c62:	f7ff fca1 	bl	80005a8 <HAL_GetTick>
 8000c66:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	03da      	lsls	r2, r3, #15
 8000c6c:	d50b      	bpl.n	8000c86 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c70:	4c0e      	ldr	r4, [pc, #56]	; (8000cac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c76:	f7ff fc97 	bl	80005a8 <HAL_GetTick>
 8000c7a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	039b      	lsls	r3, r3, #14
 8000c80:	d50a      	bpl.n	8000c98 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000c82:	2000      	movs	r0, #0
 8000c84:	e006      	b.n	8000c94 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c86:	f7ff fc8f 	bl	80005a8 <HAL_GetTick>
 8000c8a:	1b40      	subs	r0, r0, r5
 8000c8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c90:	d9ea      	bls.n	8000c68 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
}
 8000c94:	b003      	add	sp, #12
 8000c96:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c98:	f7ff fc86 	bl	80005a8 <HAL_GetTick>
 8000c9c:	1b40      	subs	r0, r0, r5
 8000c9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ca2:	d9eb      	bls.n	8000c7c <HAL_PWREx_EnableOverDrive+0x3c>
 8000ca4:	e7f5      	b.n	8000c92 <HAL_PWREx_EnableOverDrive+0x52>
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000
 8000cb0:	420e0040 	.word	0x420e0040
 8000cb4:	420e0044 	.word	0x420e0044

08000cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cbc:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b910      	cbnz	r0, 8000cc8 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <HAL_RCC_ClockConfig+0x124>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f002 020f 	and.w	r2, r2, #15
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	d328      	bcc.n	8000d26 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd4:	6821      	ldr	r1, [r4, #0]
 8000cd6:	078f      	lsls	r7, r1, #30
 8000cd8:	d42d      	bmi.n	8000d36 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cda:	07c8      	lsls	r0, r1, #31
 8000cdc:	d440      	bmi.n	8000d60 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_RCC_ClockConfig+0x124>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f002 020f 	and.w	r2, r2, #15
 8000ce6:	4295      	cmp	r5, r2
 8000ce8:	d366      	bcc.n	8000db8 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cea:	6822      	ldr	r2, [r4, #0]
 8000cec:	0751      	lsls	r1, r2, #29
 8000cee:	d46c      	bmi.n	8000dca <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf0:	0713      	lsls	r3, r2, #28
 8000cf2:	d507      	bpl.n	8000d04 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cf4:	4a3a      	ldr	r2, [pc, #232]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000cf6:	6921      	ldr	r1, [r4, #16]
 8000cf8:	6893      	ldr	r3, [r2, #8]
 8000cfa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d02:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d04:	f000 f872 	bl	8000dec <HAL_RCC_GetSysClockFreq>
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000d0a:	4a36      	ldr	r2, [pc, #216]	; (8000de4 <HAL_RCC_ClockConfig+0x12c>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	40d8      	lsrs	r0, r3
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_RCC_ClockConfig+0x130>)
 8000d18:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fbfa 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000d20:	2000      	movs	r0, #0
 8000d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d26:	b2ca      	uxtb	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d1c6      	bne.n	8000cc2 <HAL_RCC_ClockConfig+0xa>
 8000d34:	e7ce      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x1c>
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	689a      	ldrne	r2, [r3, #8]
 8000d40:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d44:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d46:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d48:	bf42      	ittt	mi
 8000d4a:	689a      	ldrmi	r2, [r3, #8]
 8000d4c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d50:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	68a0      	ldr	r0, [r4, #8]
 8000d56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d5a:	4302      	orrs	r2, r0
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	e7bc      	b.n	8000cda <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d60:	6862      	ldr	r2, [r4, #4]
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000d64:	2a01      	cmp	r2, #1
 8000d66:	d11d      	bne.n	8000da4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6e:	d0a8      	beq.n	8000cc2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d70:	4e1b      	ldr	r6, [pc, #108]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000d72:	68b3      	ldr	r3, [r6, #8]
 8000d74:	f023 0303 	bic.w	r3, r3, #3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d7c:	f7ff fc14 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d80:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d86:	68b3      	ldr	r3, [r6, #8]
 8000d88:	6862      	ldr	r2, [r4, #4]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d92:	d0a4      	beq.n	8000cde <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d94:	f7ff fc08 	bl	80005a8 <HAL_GetTick>
 8000d98:	1bc0      	subs	r0, r0, r7
 8000d9a:	4540      	cmp	r0, r8
 8000d9c:	d9f3      	bls.n	8000d86 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d9e:	2003      	movs	r0, #3
}
 8000da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da4:	1e91      	subs	r1, r2, #2
 8000da6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000daa:	d802      	bhi.n	8000db2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000db0:	e7dd      	b.n	8000d6e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	f013 0f02 	tst.w	r3, #2
 8000db6:	e7da      	b.n	8000d6e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db8:	b2ea      	uxtb	r2, r5
 8000dba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	429d      	cmp	r5, r3
 8000dc4:	f47f af7d 	bne.w	8000cc2 <HAL_RCC_ClockConfig+0xa>
 8000dc8:	e78f      	b.n	8000cea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dca:	4905      	ldr	r1, [pc, #20]	; (8000de0 <HAL_RCC_ClockConfig+0x128>)
 8000dcc:	68e0      	ldr	r0, [r4, #12]
 8000dce:	688b      	ldr	r3, [r1, #8]
 8000dd0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dd4:	4303      	orrs	r3, r0
 8000dd6:	608b      	str	r3, [r1, #8]
 8000dd8:	e78a      	b.n	8000cf0 <HAL_RCC_ClockConfig+0x38>
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00
 8000de0:	40023800 	.word	0x40023800
 8000de4:	08001a58 	.word	0x08001a58
 8000de8:	200009d0 	.word	0x200009d0

08000dec <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dec:	4920      	ldr	r1, [pc, #128]	; (8000e70 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000dee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000df0:	688b      	ldr	r3, [r1, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d007      	beq.n	8000e0a <HAL_RCC_GetSysClockFreq+0x1e>
 8000dfa:	2b0c      	cmp	r3, #12
 8000dfc:	d020      	beq.n	8000e40 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x88>)
 8000e00:	481d      	ldr	r0, [pc, #116]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf18      	it	ne
 8000e06:	4610      	movne	r0, r2
 8000e08:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e0a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e0c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e0e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e10:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e14:	bf14      	ite	ne
 8000e16:	4818      	ldrne	r0, [pc, #96]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e18:	4816      	ldreq	r0, [pc, #88]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e1a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e1e:	bf18      	it	ne
 8000e20:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e26:	fba1 0100 	umull	r0, r1, r1, r0
 8000e2a:	f7ff f9eb 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e36:	3301      	adds	r3, #1
 8000e38:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000e3a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e3e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e40:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e42:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e44:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e46:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4a:	bf14      	ite	ne
 8000e4c:	480a      	ldrne	r0, [pc, #40]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4e:	4809      	ldreq	r0, [pc, #36]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e50:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e54:	bf18      	it	ne
 8000e56:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e5c:	fba1 0100 	umull	r0, r1, r1, r0
 8000e60:	f7ff f9d0 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000e6c:	e7e5      	b.n	8000e3a <HAL_RCC_GetSysClockFreq+0x4e>
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	00f42400 	.word	0x00f42400
 8000e78:	007a1200 	.word	0x007a1200

08000e7c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7c:	6803      	ldr	r3, [r0, #0]
{
 8000e7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	07df      	lsls	r7, r3, #31
{
 8000e84:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	d410      	bmi.n	8000eaa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	079e      	lsls	r6, r3, #30
 8000e8c:	d467      	bmi.n	8000f5e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	071a      	lsls	r2, r3, #28
 8000e92:	f100 80b2 	bmi.w	8000ffa <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	075b      	lsls	r3, r3, #29
 8000e9a:	f100 80d0 	bmi.w	800103e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	69a2      	ldr	r2, [r4, #24]
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f040 8139 	bne.w	8001118 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	e01e      	b.n	8000ee8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000eaa:	4b97      	ldr	r3, [pc, #604]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	f002 020c 	and.w	r2, r2, #12
 8000eb2:	2a04      	cmp	r2, #4
 8000eb4:	d010      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000ebc:	2a08      	cmp	r2, #8
 8000ebe:	d102      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	025d      	lsls	r5, r3, #9
 8000ec4:	d408      	bmi.n	8000ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ec6:	4b90      	ldr	r3, [pc, #576]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ece:	2a0c      	cmp	r2, #12
 8000ed0:	d10d      	bne.n	8000eee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	0250      	lsls	r0, r2, #9
 8000ed6:	d50a      	bpl.n	8000eee <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	0399      	lsls	r1, r3, #14
 8000ede:	d5d3      	bpl.n	8000e88 <HAL_RCC_OscConfig+0xc>
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1d0      	bne.n	8000e88 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	b002      	add	sp, #8
 8000eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eee:	6862      	ldr	r2, [r4, #4]
 8000ef0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ef4:	d111      	bne.n	8000f1a <HAL_RCC_OscConfig+0x9e>
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000efc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000efe:	f7ff fb53 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	4d81      	ldr	r5, [pc, #516]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000f04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	682b      	ldr	r3, [r5, #0]
 8000f08:	039a      	lsls	r2, r3, #14
 8000f0a:	d4bd      	bmi.n	8000e88 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fb4c 	bl	80005a8 <HAL_GetTick>
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	2864      	cmp	r0, #100	; 0x64
 8000f14:	d9f7      	bls.n	8000f06 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000f16:	2003      	movs	r0, #3
 8000f18:	e7e6      	b.n	8000ee8 <HAL_RCC_OscConfig+0x6c>
 8000f1a:	4d7b      	ldr	r5, [pc, #492]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	d107      	bne.n	8000f34 <HAL_RCC_OscConfig+0xb8>
 8000f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f28:	602b      	str	r3, [r5, #0]
 8000f2a:	682b      	ldr	r3, [r5, #0]
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	602b      	str	r3, [r5, #0]
 8000f32:	e7e4      	b.n	8000efe <HAL_RCC_OscConfig+0x82>
 8000f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f38:	602b      	str	r3, [r5, #0]
 8000f3a:	682b      	ldr	r3, [r5, #0]
 8000f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f40:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d1db      	bne.n	8000efe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb2f 	bl	80005a8 <HAL_GetTick>
 8000f4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	039b      	lsls	r3, r3, #14
 8000f50:	d59a      	bpl.n	8000e88 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb29 	bl	80005a8 <HAL_GetTick>
 8000f56:	1b80      	subs	r0, r0, r6
 8000f58:	2864      	cmp	r0, #100	; 0x64
 8000f5a:	d9f7      	bls.n	8000f4c <HAL_RCC_OscConfig+0xd0>
 8000f5c:	e7db      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	f012 0f0c 	tst.w	r2, #12
 8000f66:	d010      	beq.n	8000f8a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000f6e:	2a08      	cmp	r2, #8
 8000f70:	d102      	bne.n	8000f78 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	025f      	lsls	r7, r3, #9
 8000f76:	d508      	bpl.n	8000f8a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f78:	4a63      	ldr	r2, [pc, #396]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8000f7a:	6893      	ldr	r3, [r2, #8]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d111      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f84:	6853      	ldr	r3, [r2, #4]
 8000f86:	025e      	lsls	r6, r3, #9
 8000f88:	d40e      	bmi.n	8000fa8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	4b5f      	ldr	r3, [pc, #380]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	0795      	lsls	r5, r2, #30
 8000f90:	d502      	bpl.n	8000f98 <HAL_RCC_OscConfig+0x11c>
 8000f92:	68e2      	ldr	r2, [r4, #12]
 8000f94:	2a01      	cmp	r2, #1
 8000f96:	d1a6      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	6921      	ldr	r1, [r4, #16]
 8000f9c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000fa0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000fa4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	e772      	b.n	8000e8e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fa8:	68e2      	ldr	r2, [r4, #12]
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <HAL_RCC_OscConfig+0x290>)
 8000fac:	b1b2      	cbz	r2, 8000fdc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fb2:	f7ff faf9 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb6:	4d54      	ldr	r5, [pc, #336]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000fb8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	0798      	lsls	r0, r3, #30
 8000fbe:	d507      	bpl.n	8000fd0 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	6922      	ldr	r2, [r4, #16]
 8000fc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fcc:	602b      	str	r3, [r5, #0]
 8000fce:	e75e      	b.n	8000e8e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd0:	f7ff faea 	bl	80005a8 <HAL_GetTick>
 8000fd4:	1b80      	subs	r0, r0, r6
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9ef      	bls.n	8000fba <HAL_RCC_OscConfig+0x13e>
 8000fda:	e79c      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000fdc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fde:	f7ff fae3 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe2:	4d49      	ldr	r5, [pc, #292]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000fe4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	0799      	lsls	r1, r3, #30
 8000fea:	f57f af50 	bpl.w	8000e8e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fee:	f7ff fadb 	bl	80005a8 <HAL_GetTick>
 8000ff2:	1b80      	subs	r0, r0, r6
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d9f6      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x16a>
 8000ff8:	e78d      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ffa:	6962      	ldr	r2, [r4, #20]
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <HAL_RCC_OscConfig+0x294>)
 8000ffe:	b17a      	cbz	r2, 8001020 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001004:	f7ff fad0 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001008:	4d3f      	ldr	r5, [pc, #252]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800100a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800100e:	079f      	lsls	r7, r3, #30
 8001010:	f53f af41 	bmi.w	8000e96 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fac8 	bl	80005a8 <HAL_GetTick>
 8001018:	1b80      	subs	r0, r0, r6
 800101a:	2802      	cmp	r0, #2
 800101c:	d9f6      	bls.n	800100c <HAL_RCC_OscConfig+0x190>
 800101e:	e77a      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001020:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001022:	f7ff fac1 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001026:	4d38      	ldr	r5, [pc, #224]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001028:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800102a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800102c:	0798      	lsls	r0, r3, #30
 800102e:	f57f af32 	bpl.w	8000e96 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001032:	f7ff fab9 	bl	80005a8 <HAL_GetTick>
 8001036:	1b80      	subs	r0, r0, r6
 8001038:	2802      	cmp	r0, #2
 800103a:	d9f6      	bls.n	800102a <HAL_RCC_OscConfig+0x1ae>
 800103c:	e76b      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8001040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001042:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001046:	d128      	bne.n	800109a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	9201      	str	r2, [sp, #4]
 800104a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800105c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105e:	4d2d      	ldr	r5, [pc, #180]	; (8001114 <HAL_RCC_OscConfig+0x298>)
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	05d9      	lsls	r1, r3, #23
 8001064:	d51b      	bpl.n	800109e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001066:	68a3      	ldr	r3, [r4, #8]
 8001068:	4d27      	ldr	r5, [pc, #156]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 800106a:	2b01      	cmp	r3, #1
 800106c:	d127      	bne.n	80010be <HAL_RCC_OscConfig+0x242>
 800106e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001076:	f7ff fa97 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107a:	4d23      	ldr	r5, [pc, #140]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800107c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001082:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001084:	079b      	lsls	r3, r3, #30
 8001086:	d539      	bpl.n	80010fc <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001088:	2e00      	cmp	r6, #0
 800108a:	f43f af08 	beq.w	8000e9e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_RCC_OscConfig+0x28c>)
 8001090:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	e701      	b.n	8000e9e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800109a:	2600      	movs	r6, #0
 800109c:	e7df      	b.n	800105e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010a6:	f7ff fa7f 	bl	80005a8 <HAL_GetTick>
 80010aa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	05da      	lsls	r2, r3, #23
 80010b0:	d4d9      	bmi.n	8001066 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b2:	f7ff fa79 	bl	80005a8 <HAL_GetTick>
 80010b6:	1bc0      	subs	r0, r0, r7
 80010b8:	2802      	cmp	r0, #2
 80010ba:	d9f7      	bls.n	80010ac <HAL_RCC_OscConfig+0x230>
 80010bc:	e72b      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d104      	bne.n	80010cc <HAL_RCC_OscConfig+0x250>
 80010c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	672b      	str	r3, [r5, #112]	; 0x70
 80010ca:	e7d0      	b.n	800106e <HAL_RCC_OscConfig+0x1f2>
 80010cc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	672a      	str	r2, [r5, #112]	; 0x70
 80010d4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80010d6:	f022 0204 	bic.w	r2, r2, #4
 80010da:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ca      	bne.n	8001076 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80010e0:	f7ff fa62 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010e8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010ec:	0798      	lsls	r0, r3, #30
 80010ee:	d5cb      	bpl.n	8001088 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f0:	f7ff fa5a 	bl	80005a8 <HAL_GetTick>
 80010f4:	1bc0      	subs	r0, r0, r7
 80010f6:	4540      	cmp	r0, r8
 80010f8:	d9f7      	bls.n	80010ea <HAL_RCC_OscConfig+0x26e>
 80010fa:	e70c      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fc:	f7ff fa54 	bl	80005a8 <HAL_GetTick>
 8001100:	1bc0      	subs	r0, r0, r7
 8001102:	4540      	cmp	r0, r8
 8001104:	d9bd      	bls.n	8001082 <HAL_RCC_OscConfig+0x206>
 8001106:	e706      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
 8001108:	40023800 	.word	0x40023800
 800110c:	42470000 	.word	0x42470000
 8001110:	42470e80 	.word	0x42470e80
 8001114:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001118:	4d23      	ldr	r5, [pc, #140]	; (80011a8 <HAL_RCC_OscConfig+0x32c>)
 800111a:	68ab      	ldr	r3, [r5, #8]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	f43f aee0 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x6a>
 8001126:	4e21      	ldr	r6, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001128:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800112a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800112c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800112e:	d12d      	bne.n	800118c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001130:	f7ff fa3a 	bl	80005a8 <HAL_GetTick>
 8001134:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	0199      	lsls	r1, r3, #6
 800113a:	d421      	bmi.n	8001180 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113c:	6a22      	ldr	r2, [r4, #32]
 800113e:	69e3      	ldr	r3, [r4, #28]
 8001140:	4313      	orrs	r3, r2
 8001142:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001144:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001148:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800114a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800114e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001150:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001154:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4c14      	ldr	r4, [pc, #80]	; (80011a8 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	0852      	lsrs	r2, r2, #1
 800115a:	3a01      	subs	r2, #1
 800115c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001160:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001162:	2301      	movs	r3, #1
 8001164:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001166:	f7ff fa1f 	bl	80005a8 <HAL_GetTick>
 800116a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	019a      	lsls	r2, r3, #6
 8001170:	f53f ae99 	bmi.w	8000ea6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001174:	f7ff fa18 	bl	80005a8 <HAL_GetTick>
 8001178:	1b40      	subs	r0, r0, r5
 800117a:	2802      	cmp	r0, #2
 800117c:	d9f6      	bls.n	800116c <HAL_RCC_OscConfig+0x2f0>
 800117e:	e6ca      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fa12 	bl	80005a8 <HAL_GetTick>
 8001184:	1bc0      	subs	r0, r0, r7
 8001186:	2802      	cmp	r0, #2
 8001188:	d9d5      	bls.n	8001136 <HAL_RCC_OscConfig+0x2ba>
 800118a:	e6c4      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800118c:	f7ff fa0c 	bl	80005a8 <HAL_GetTick>
 8001190:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	f57f ae86 	bpl.w	8000ea6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fa05 	bl	80005a8 <HAL_GetTick>
 800119e:	1b00      	subs	r0, r0, r4
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9f6      	bls.n	8001192 <HAL_RCC_OscConfig+0x316>
 80011a4:	e6b7      	b.n	8000f16 <HAL_RCC_OscConfig+0x9a>
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	42470060 	.word	0x42470060

080011b0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011b0:	6803      	ldr	r3, [r0, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	f042 0201 	orr.w	r2, r2, #1
 80011b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011c0:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 80011c2:	bf1e      	ittt	ne
 80011c4:	681a      	ldrne	r2, [r3, #0]
 80011c6:	f042 0201 	orrne.w	r2, r2, #1
 80011ca:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80011cc:	2000      	movs	r0, #0
 80011ce:	4770      	bx	lr

080011d0 <HAL_TIM_PeriodElapsedCallback>:
 80011d0:	4770      	bx	lr

080011d2 <HAL_TIM_OC_DelayElapsedCallback>:
 80011d2:	4770      	bx	lr

080011d4 <HAL_TIM_IC_CaptureCallback>:
 80011d4:	4770      	bx	lr

080011d6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80011d6:	4770      	bx	lr

080011d8 <HAL_TIM_TriggerCallback>:
 80011d8:	4770      	bx	lr

080011da <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011da:	6803      	ldr	r3, [r0, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	0791      	lsls	r1, r2, #30
{
 80011e0:	b510      	push	{r4, lr}
 80011e2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011e4:	d50e      	bpl.n	8001204 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	0792      	lsls	r2, r2, #30
 80011ea:	d50b      	bpl.n	8001204 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80011ec:	f06f 0202 	mvn.w	r2, #2
 80011f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011f2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011f4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011f6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80011f8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80011fa:	d077      	beq.n	80012ec <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80011fc:	f7ff ffea 	bl	80011d4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001200:	2300      	movs	r3, #0
 8001202:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	0750      	lsls	r0, r2, #29
 800120a:	d510      	bpl.n	800122e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	0751      	lsls	r1, r2, #29
 8001210:	d50d      	bpl.n	800122e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001212:	f06f 0204 	mvn.w	r2, #4
 8001216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001218:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800121a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800121c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001220:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001222:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001224:	d068      	beq.n	80012f8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001226:	f7ff ffd5 	bl	80011d4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800122a:	2300      	movs	r3, #0
 800122c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	0712      	lsls	r2, r2, #28
 8001234:	d50f      	bpl.n	8001256 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	0710      	lsls	r0, r2, #28
 800123a:	d50c      	bpl.n	8001256 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800123c:	f06f 0208 	mvn.w	r2, #8
 8001240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001242:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001244:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001246:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001248:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800124a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800124c:	d05a      	beq.n	8001304 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800124e:	f7ff ffc1 	bl	80011d4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001252:	2300      	movs	r3, #0
 8001254:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	06d2      	lsls	r2, r2, #27
 800125c:	d510      	bpl.n	8001280 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	06d0      	lsls	r0, r2, #27
 8001262:	d50d      	bpl.n	8001280 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001264:	f06f 0210 	mvn.w	r2, #16
 8001268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800126a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800126c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800126e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001272:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001274:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001276:	d04b      	beq.n	8001310 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001278:	f7ff ffac 	bl	80011d4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800127c:	2300      	movs	r3, #0
 800127e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	07d1      	lsls	r1, r2, #31
 8001286:	d508      	bpl.n	800129a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	07d2      	lsls	r2, r2, #31
 800128c:	d505      	bpl.n	800129a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800128e:	f06f 0201 	mvn.w	r2, #1
 8001292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff ff9b 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	0610      	lsls	r0, r2, #24
 80012a0:	d508      	bpl.n	80012b4 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	0611      	lsls	r1, r2, #24
 80012a6:	d505      	bpl.n	80012b4 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012ae:	4620      	mov	r0, r4
 80012b0:	f000 f8d5 	bl	800145e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	0652      	lsls	r2, r2, #25
 80012ba:	d508      	bpl.n	80012ce <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	0650      	lsls	r0, r2, #25
 80012c0:	d505      	bpl.n	80012ce <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80012c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff ff85 	bl	80011d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	0691      	lsls	r1, r2, #26
 80012d4:	d522      	bpl.n	800131c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	0692      	lsls	r2, r2, #26
 80012da:	d51f      	bpl.n	800131c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012dc:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80012e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012e2:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80012e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80012e8:	f000 b8b8 	b.w	800145c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ec:	f7ff ff71 	bl	80011d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff ff70 	bl	80011d6 <HAL_TIM_PWM_PulseFinishedCallback>
 80012f6:	e783      	b.n	8001200 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012f8:	f7ff ff6b 	bl	80011d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff ff6a 	bl	80011d6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001302:	e792      	b.n	800122a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001304:	f7ff ff65 	bl	80011d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff ff64 	bl	80011d6 <HAL_TIM_PWM_PulseFinishedCallback>
 800130e:	e7a0      	b.n	8001252 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001310:	f7ff ff5f 	bl	80011d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff ff5e 	bl	80011d6 <HAL_TIM_PWM_PulseFinishedCallback>
 800131a:	e7af      	b.n	800127c <HAL_TIM_IRQHandler+0xa2>
 800131c:	bd10      	pop	{r4, pc}
	...

08001320 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001320:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001322:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001324:	4290      	cmp	r0, r2
 8001326:	d012      	beq.n	800134e <TIM_Base_SetConfig+0x2e>
 8001328:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800132c:	d00f      	beq.n	800134e <TIM_Base_SetConfig+0x2e>
 800132e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001332:	4290      	cmp	r0, r2
 8001334:	d00b      	beq.n	800134e <TIM_Base_SetConfig+0x2e>
 8001336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800133a:	4290      	cmp	r0, r2
 800133c:	d007      	beq.n	800134e <TIM_Base_SetConfig+0x2e>
 800133e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001342:	4290      	cmp	r0, r2
 8001344:	d003      	beq.n	800134e <TIM_Base_SetConfig+0x2e>
 8001346:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800134a:	4290      	cmp	r0, r2
 800134c:	d119      	bne.n	8001382 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800134e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001354:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001356:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <TIM_Base_SetConfig+0xc4>)
 8001358:	4290      	cmp	r0, r2
 800135a:	d029      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 800135c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001360:	d026      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 8001362:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001366:	4290      	cmp	r0, r2
 8001368:	d022      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 800136a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800136e:	4290      	cmp	r0, r2
 8001370:	d01e      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 8001372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001376:	4290      	cmp	r0, r2
 8001378:	d01a      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 800137a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800137e:	4290      	cmp	r0, r2
 8001380:	d016      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 8001382:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <TIM_Base_SetConfig+0xc8>)
 8001384:	4290      	cmp	r0, r2
 8001386:	d013      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 8001388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800138c:	4290      	cmp	r0, r2
 800138e:	d00f      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 8001390:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001394:	4290      	cmp	r0, r2
 8001396:	d00b      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 8001398:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800139c:	4290      	cmp	r0, r2
 800139e:	d007      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 80013a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013a4:	4290      	cmp	r0, r2
 80013a6:	d003      	beq.n	80013b0 <TIM_Base_SetConfig+0x90>
 80013a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ac:	4290      	cmp	r0, r2
 80013ae:	d103      	bne.n	80013b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013b0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80013b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013b6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013b8:	694a      	ldr	r2, [r1, #20]
 80013ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013be:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80013c0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013c2:	688b      	ldr	r3, [r1, #8]
 80013c4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013c6:	680b      	ldr	r3, [r1, #0]
 80013c8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <TIM_Base_SetConfig+0xc4>)
 80013cc:	4298      	cmp	r0, r3
 80013ce:	d003      	beq.n	80013d8 <TIM_Base_SetConfig+0xb8>
 80013d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013d4:	4298      	cmp	r0, r3
 80013d6:	d101      	bne.n	80013dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013d8:	690b      	ldr	r3, [r1, #16]
 80013da:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013dc:	2301      	movs	r3, #1
 80013de:	6143      	str	r3, [r0, #20]
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40014000 	.word	0x40014000

080013ec <HAL_TIM_Base_Init>:
{
 80013ec:	b510      	push	{r4, lr}
  if (htim == NULL)
 80013ee:	4604      	mov	r4, r0
 80013f0:	b1a0      	cbz	r0, 800141c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80013f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013fa:	b91b      	cbnz	r3, 8001404 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80013fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001400:	f000 f9e0 	bl	80017c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001404:	2302      	movs	r3, #2
 8001406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800140a:	6820      	ldr	r0, [r4, #0]
 800140c:	1d21      	adds	r1, r4, #4
 800140e:	f7ff ff87 	bl	8001320 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001412:	2301      	movs	r3, #1
 8001414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001418:	2000      	movs	r0, #0
 800141a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800141c:	2001      	movs	r0, #1
}
 800141e:	bd10      	pop	{r4, pc}

08001420 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001420:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001424:	2b01      	cmp	r3, #1
{
 8001426:	b530      	push	{r4, r5, lr}
 8001428:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800142c:	d014      	beq.n	8001458 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800142e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001430:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001434:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001436:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001438:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800143a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800143c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001444:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001446:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001448:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800144a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800144c:	2301      	movs	r3, #1
 800144e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001452:	2300      	movs	r3, #0
 8001454:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001458:	4618      	mov	r0, r3

  return HAL_OK;
}
 800145a:	bd30      	pop	{r4, r5, pc}

0800145c <HAL_TIMEx_CommutCallback>:
 800145c:	4770      	bx	lr

0800145e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800145e:	4770      	bx	lr

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b530      	push	{r4, r5, lr}
 8001462:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001464:	2234      	movs	r2, #52	; 0x34
 8001466:	2100      	movs	r1, #0
 8001468:	a807      	add	r0, sp, #28
 800146a:	f000 fadd 	bl	8001a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146e:	2100      	movs	r1, #0
 8001470:	2214      	movs	r2, #20
 8001472:	a802      	add	r0, sp, #8
 8001474:	f000 fad8 	bl	8001a28 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2500      	movs	r5, #0
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <SystemClock_Config+0x94>)
 800147c:	9500      	str	r5, [sp, #0]
 800147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <SystemClock_Config+0x98>)
 8001492:	9501      	str	r5, [sp, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ae:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014b4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014b6:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ba:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014be:	23b4      	movs	r3, #180	; 0xb4
 80014c0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f7ff fcd7 	bl	8000e7c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014ce:	f7ff fbb7 	bl	8000c40 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014da:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014dc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ea:	f7ff fbe5 	bl	8000cb8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80014ee:	b015      	add	sp, #84	; 0x54
 80014f0:	bd30      	pop	{r4, r5, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <main>:
{
 80014fc:	b500      	push	{lr}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001500:	f7ff f82c 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8001504:	f7ff ffac 	bl	8001460 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	2214      	movs	r2, #20

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2400      	movs	r4, #0
 800150c:	4d52      	ldr	r5, [pc, #328]	; (8001658 <main+0x15c>)
  hdac.Instance = DAC;
 800150e:	4e53      	ldr	r6, [pc, #332]	; (800165c <main+0x160>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	2100      	movs	r1, #0
 8001512:	eb0d 0002 	add.w	r0, sp, r2
 8001516:	f000 fa87 	bl	8001a28 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	9401      	str	r4, [sp, #4]
 800151c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(out1_GPIO_Port, out1_Pin, GPIO_PIN_RESET);
 800151e:	4850      	ldr	r0, [pc, #320]	; (8001660 <main+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	632b      	str	r3, [r5, #48]	; 0x30
 8001526:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001530:	9402      	str	r4, [sp, #8]
 8001532:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	632b      	str	r3, [r5, #48]	; 0x30
 800153a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800153c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	9403      	str	r4, [sp, #12]
 8001546:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	632b      	str	r3, [r5, #48]	; 0x30
 800154e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	9303      	str	r3, [sp, #12]
 8001556:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	9404      	str	r4, [sp, #16]
 800155a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	632b      	str	r3, [r5, #48]	; 0x30
 8001562:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001564:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(out1_GPIO_Port, out1_Pin, GPIO_PIN_RESET);
 8001568:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(out1_GPIO_Port, out1_Pin, GPIO_PIN_RESET);
 800156c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(out1_GPIO_Port, out1_Pin, GPIO_PIN_RESET);
 8001572:	f7ff fb59 	bl	8000c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <main+0x168>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001580:	4837      	ldr	r0, [pc, #220]	; (8001660 <main+0x164>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001582:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001586:	f7ff fa6f 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158a:	230c      	movs	r3, #12
 800158c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001598:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	4833      	ldr	r0, [pc, #204]	; (8001668 <main+0x16c>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f7ff fa62 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : out1_Pin */
  GPIO_InitStruct.Pin = out1_Pin;
 80015a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(out1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
  HAL_GPIO_Init(out1_GPIO_Port, &GPIO_InitStruct);
 80015ae:	482c      	ldr	r0, [pc, #176]	; (8001660 <main+0x164>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(out1_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f7ff fa57 	bl	8000a68 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ba:	9400      	str	r4, [sp, #0]
 80015bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80015be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c2:	632b      	str	r3, [r5, #48]	; 0x30
 80015c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim7.Instance = TIM7;
 80015c6:	4d29      	ldr	r5, [pc, #164]	; (800166c <main+0x170>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015cc:	4622      	mov	r2, r4
 80015ce:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d0:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015d2:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d4:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015d6:	f7fe ffff 	bl	80005d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015da:	2010      	movs	r0, #16
 80015dc:	f7ff f830 	bl	8000640 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015e0:	4622      	mov	r2, r4
 80015e2:	4621      	mov	r1, r4
 80015e4:	2011      	movs	r0, #17
 80015e6:	f7fe fff7 	bl	80005d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015ea:	2011      	movs	r0, #17
 80015ec:	f7ff f828 	bl	8000640 <HAL_NVIC_EnableIRQ>
  hdac.Instance = DAC;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <main+0x174>)
 80015f2:	6033      	str	r3, [r6, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015f4:	4630      	mov	r0, r6
  DAC_ChannelConfTypeDef sConfig = {0};
 80015f6:	9405      	str	r4, [sp, #20]
 80015f8:	9406      	str	r4, [sp, #24]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015fa:	f7ff f845 	bl	8000688 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80015fe:	233c      	movs	r3, #60	; 0x3c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001600:	4622      	mov	r2, r4
 8001602:	a905      	add	r1, sp, #20
 8001604:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001606:	9305      	str	r3, [sp, #20]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001608:	9406      	str	r4, [sp, #24]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800160a:	f7ff f8ab 	bl	8000764 <HAL_DAC_ConfigChannel>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800160e:	2210      	movs	r2, #16
 8001610:	a905      	add	r1, sp, #20
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff f8a6 	bl	8000764 <HAL_DAC_ConfigChannel>
  htim7.Instance = TIM7;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <main+0x178>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	9405      	str	r4, [sp, #20]
  htim7.Init.Prescaler = 0;
 800161c:	e885 0018 	stmia.w	r5, {r3, r4}
  htim7.Init.Period = 80;
 8001620:	2350      	movs	r3, #80	; 0x50
 8001622:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001624:	4628      	mov	r0, r5
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	61ab      	str	r3, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162a:	9406      	str	r4, [sp, #24]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800162e:	f7ff fedd 	bl	80013ec <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001632:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001634:	a905      	add	r1, sp, #20
 8001636:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001638:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800163c:	f7ff fef0 	bl	8001420 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001640:	4621      	mov	r1, r4
 8001642:	4630      	mov	r0, r6
 8001644:	f7ff f833 	bl	80006ae <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001648:	2110      	movs	r1, #16
 800164a:	4630      	mov	r0, r6
 800164c:	f7ff f82f 	bl	80006ae <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8001650:	4628      	mov	r0, r5
 8001652:	f7ff fdad 	bl	80011b0 <HAL_TIM_Base_Start_IT>
 8001656:	e7fe      	b.n	8001656 <main+0x15a>
 8001658:	40023800 	.word	0x40023800
 800165c:	2000123c 	.word	0x2000123c
 8001660:	40020800 	.word	0x40020800
 8001664:	10210000 	.word	0x10210000
 8001668:	40020000 	.word	0x40020000
 800166c:	20001a80 	.word	0x20001a80
 8001670:	40007400 	.word	0x40007400
 8001674:	40001400 	.word	0x40001400

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	4770      	bx	lr
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_MspInit+0x3c>)
 8001680:	2100      	movs	r1, #0
 8001682:	9100      	str	r1, [sp, #0]
 8001684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800168a:	645a      	str	r2, [r3, #68]	; 0x44
 800168c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800168e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	9101      	str	r1, [sp, #4]
 8001698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ac:	f7fe ff82 	bl	80005b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b0:	b003      	add	sp, #12
 80016b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	4605      	mov	r5, r0
 80016c0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	2214      	movs	r2, #20
 80016c4:	2100      	movs	r1, #0
 80016c6:	a803      	add	r0, sp, #12
 80016c8:	f000 f9ae 	bl	8001a28 <memset>
  if(hdac->Instance==DAC)
 80016cc:	682a      	ldr	r2, [r5, #0]
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_DAC_MspInit+0xf0>)
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d169      	bne.n	80017a8 <HAL_DAC_MspInit+0xec>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016d4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80016d8:	2600      	movs	r6, #0
 80016da:	9601      	str	r6, [sp, #4]
 80016dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	4834      	ldr	r0, [pc, #208]	; (80017b0 <HAL_DAC_MspInit+0xf4>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80016e0:	4c34      	ldr	r4, [pc, #208]	; (80017b4 <HAL_DAC_MspInit+0xf8>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80016e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
 80016e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ea:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	9602      	str	r6, [sp, #8]
 80016f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001706:	2330      	movs	r3, #48	; 0x30
 8001708:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170c:	2303      	movs	r3, #3
 800170e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f7ff f9aa 	bl	8000a68 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001714:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <HAL_DAC_MspInit+0xfc>)
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001716:	60e6      	str	r6, [r4, #12]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001718:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 800171c:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8001720:	e884 100c 	stmia.w	r4, {r2, r3, ip}
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172e:	6163      	str	r3, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	61a3      	str	r3, [r4, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	61e3      	str	r3, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800173c:	4620      	mov	r0, r4
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 800173e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001742:	6223      	str	r3, [r4, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001744:	6266      	str	r6, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001746:	f7ff f857 	bl	80007f8 <HAL_DMA_Init>
 800174a:	b108      	cbz	r0, 8001750 <HAL_DAC_MspInit+0x94>
    {
      Error_Handler();
 800174c:	f7ff ff94 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001750:	60ac      	str	r4, [r5, #8]
 8001752:	63a5      	str	r5, [r4, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001754:	4c19      	ldr	r4, [pc, #100]	; (80017bc <HAL_DAC_MspInit+0x100>)
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_DAC_MspInit+0x104>)
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175c:	6122      	str	r2, [r4, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800175e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001762:	6162      	str	r2, [r4, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001768:	f04f 6660 	mov.w	r6, #234881024	; 0xe000000
 800176c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001770:	61a2      	str	r2, [r4, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001772:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001776:	e884 4048 	stmia.w	r4, {r3, r6, lr}
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 800177a:	61e2      	str	r2, [r4, #28]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800177c:	2300      	movs	r3, #0
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 800177e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001782:	4620      	mov	r0, r4
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001784:	60e3      	str	r3, [r4, #12]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 8001786:	6222      	str	r2, [r4, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800178a:	f7ff f835 	bl	80007f8 <HAL_DMA_Init>
 800178e:	b108      	cbz	r0, 8001794 <HAL_DAC_MspInit+0xd8>
    {
      Error_Handler();
 8001790:	f7ff ff72 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001796:	60ec      	str	r4, [r5, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001798:	2036      	movs	r0, #54	; 0x36
 800179a:	4611      	mov	r1, r2
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 800179c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800179e:	f7fe ff1b 	bl	80005d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a2:	2036      	movs	r0, #54	; 0x36
 80017a4:	f7fe ff4c 	bl	8000640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80017a8:	b008      	add	sp, #32
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	40007400 	.word	0x40007400
 80017b0:	40020000 	.word	0x40020000
 80017b4:	20000a0c 	.word	0x20000a0c
 80017b8:	40026088 	.word	0x40026088
 80017bc:	20001250 	.word	0x20001250
 80017c0:	400260a0 	.word	0x400260a0

080017c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c4:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM7)
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_TIM_Base_MspInit+0x38>)
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d113      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017ce:	2200      	movs	r2, #0
 80017d0:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80017d8:	f041 0120 	orr.w	r1, r1, #32
 80017dc:	6419      	str	r1, [r3, #64]	; 0x40
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017e6:	2037      	movs	r0, #55	; 0x37
 80017e8:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017ec:	f7fe fef4 	bl	80005d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017f0:	2037      	movs	r0, #55	; 0x37
 80017f2:	f7fe ff25 	bl	8000640 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80017f6:	b003      	add	sp, #12
 80017f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80017fc:	40001400 	.word	0x40001400

08001800 <NMI_Handler>:
 8001800:	4770      	bx	lr

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler>

0800180a <SVC_Handler>:
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  static char button_last = 1;
  static int div = 0;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f7fe febd 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  div++;
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <SysTick_Handler+0x40>)
 8001818:	6813      	ldr	r3, [r2, #0]
 800181a:	3301      	adds	r3, #1
  if( div < 20 ) return;
 800181c:	2b13      	cmp	r3, #19
 800181e:	dc01      	bgt.n	8001824 <SysTick_Handler+0x14>
  div++;
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	bd08      	pop	{r3, pc}
  div = 0;
 8001824:	2300      	movs	r3, #0

  char button_new = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <SysTick_Handler+0x44>)
  div = 0;
 800182c:	6013      	str	r3, [r2, #0]
  char button_new = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800182e:	f7ff f9f5 	bl	8000c1c <HAL_GPIO_ReadPin>
  if( button_last == 1 && button_new == 0 )
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <SysTick_Handler+0x48>)
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	2a01      	cmp	r2, #1
 8001838:	461a      	mov	r2, r3
 800183a:	d107      	bne.n	800184c <SysTick_Handler+0x3c>
 800183c:	b930      	cbnz	r0, 800184c <SysTick_Handler+0x3c>
  {
	  select++;
 800183e:	4907      	ldr	r1, [pc, #28]	; (800185c <SysTick_Handler+0x4c>)
 8001840:	680b      	ldr	r3, [r1, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	2b02      	cmp	r3, #2
 8001846:	bfc8      	it	gt
 8001848:	4603      	movgt	r3, r0
 800184a:	600b      	str	r3, [r1, #0]
	  if( select >= 3 ) select = 0;
  }

  button_last = button_new;
 800184c:	7010      	strb	r0, [r2, #0]
 800184e:	bd08      	pop	{r3, pc}
 8001850:	200009f4 	.word	0x200009f4
 8001854:	40020800 	.word	0x40020800
 8001858:	20000008 	.word	0x20000008
 800185c:	200009f8 	.word	0x200009f8

08001860 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <DMA1_Stream5_IRQHandler+0x8>)
 8001862:	f7ff b847 	b.w	80008f4 <HAL_DMA_IRQHandler>
 8001866:	bf00      	nop
 8001868:	20000a0c 	.word	0x20000a0c

0800186c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA1_Stream6_IRQHandler+0x8>)
 800186e:	f7ff b841 	b.w	80008f4 <HAL_DMA_IRQHandler>
 8001872:	bf00      	nop
 8001874:	20001250 	.word	0x20001250

08001878 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001878:	4801      	ldr	r0, [pc, #4]	; (8001880 <TIM6_DAC_IRQHandler+0x8>)
 800187a:	f7fe bf47 	b.w	800070c <HAL_DAC_IRQHandler>
 800187e:	bf00      	nop
 8001880:	2000123c 	.word	0x2000123c

08001884 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static const int DACSTEP = 3600/50, DACBASE = 200, YLINE = 50, XLINE = 50;
  static int value1 = 0;
  static int value2 = 0;
  static int x = 0, y = 0, colour_cntr = 0;
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001886:	4826      	ldr	r0, [pc, #152]	; (8001920 <TIM7_IRQHandler+0x9c>)
 8001888:	f7ff fca7 	bl	80011da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  HAL_GPIO_TogglePin(out1_GPIO_Port, out1_Pin);
 800188c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001890:	4824      	ldr	r0, [pc, #144]	; (8001924 <TIM7_IRQHandler+0xa0>)
 8001892:	f7ff f9ce 	bl	8000c32 <HAL_GPIO_TogglePin>

  if( colour_cntr > 0 ){
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <TIM7_IRQHandler+0xa4>)
 8001898:	6813      	ldr	r3, [r2, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	4616      	mov	r6, r2
 800189e:	dd02      	ble.n	80018a6 <TIM7_IRQHandler+0x22>
	  colour_cntr--;
 80018a0:	3b01      	subs	r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
	  return;
 80018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018a6:	4821      	ldr	r0, [pc, #132]	; (800192c <TIM7_IRQHandler+0xa8>)
 80018a8:	4c21      	ldr	r4, [pc, #132]	; (8001930 <TIM7_IRQHandler+0xac>)
 80018aa:	6802      	ldr	r2, [r0, #0]
 80018ac:	6823      	ldr	r3, [r4, #0]
    if( x >= XLINE ){
	    x = 0;
	    y++;
	    if( y >= YLINE ) y = 0;
    }
  }while( picture5[YLINE-1-y][x] == 0 );
 80018ae:	4f21      	ldr	r7, [pc, #132]	; (8001934 <TIM7_IRQHandler+0xb0>)
  if( colour_cntr > 0 ){
 80018b0:	2500      	movs	r5, #0
  }while( picture5[YLINE-1-y][x] == 0 );
 80018b2:	f04f 0e32 	mov.w	lr, #50	; 0x32
    x++;
 80018b6:	3301      	adds	r3, #1
    if( x >= XLINE ){
 80018b8:	2b31      	cmp	r3, #49	; 0x31
 80018ba:	dc29      	bgt.n	8001910 <TIM7_IRQHandler+0x8c>
  }while( picture5[YLINE-1-y][x] == 0 );
 80018bc:	f1c2 0131 	rsb	r1, r2, #49	; 0x31
 80018c0:	fb0e 7101 	mla	r1, lr, r1, r7
 80018c4:	5cc9      	ldrb	r1, [r1, r3]
 80018c6:	2900      	cmp	r1, #0
 80018c8:	d0f5      	beq.n	80018b6 <TIM7_IRQHandler+0x32>
 80018ca:	6023      	str	r3, [r4, #0]
 80018cc:	b105      	cbz	r5, 80018d0 <TIM7_IRQHandler+0x4c>
 80018ce:	6002      	str	r2, [r0, #0]

  // found non zero colour
  colour_cntr = picture5[YLINE-1-y][x] - 1;
 80018d0:	3901      	subs	r1, #1
 80018d2:	6031      	str	r1, [r6, #0]
  value2 = DACBASE + y * DACSTEP;
 80018d4:	2148      	movs	r1, #72	; 0x48
 80018d6:	4c18      	ldr	r4, [pc, #96]	; (8001938 <TIM7_IRQHandler+0xb4>)
  value1 = DACBASE + x * DACSTEP;

  //value2 = 3800 - value1;
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value1);
 80018d8:	4818      	ldr	r0, [pc, #96]	; (800193c <TIM7_IRQHandler+0xb8>)
  value2 = DACBASE + y * DACSTEP;
 80018da:	434a      	muls	r2, r1
 80018dc:	32c8      	adds	r2, #200	; 0xc8
 80018de:	6022      	str	r2, [r4, #0]
  value1 = DACBASE + x * DACSTEP;
 80018e0:	434b      	muls	r3, r1
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value1);
 80018e2:	2200      	movs	r2, #0
 80018e4:	4611      	mov	r1, r2
 80018e6:	33c8      	adds	r3, #200	; 0xc8
 80018e8:	f7fe ff5c 	bl	80007a4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80018ec:	2100      	movs	r1, #0
 80018ee:	4813      	ldr	r0, [pc, #76]	; (800193c <TIM7_IRQHandler+0xb8>)
 80018f0:	f7fe fedd 	bl	80006ae <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value2);
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	4811      	ldr	r0, [pc, #68]	; (800193c <TIM7_IRQHandler+0xb8>)
 80018f8:	2110      	movs	r1, #16
 80018fa:	2200      	movs	r2, #0
 80018fc:	f7fe ff52 	bl	80007a4 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001900:	2110      	movs	r1, #16
 8001902:	480e      	ldr	r0, [pc, #56]	; (800193c <TIM7_IRQHandler+0xb8>)
  //value1 += DACSTEP;
  //if(value1 >= 3800) value1 = 200;
  /* USER CODE END TIM7_IRQn 1 */
}
 8001904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001908:	f7fe bed1 	b.w	80006ae <HAL_DAC_Start>
	    x = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	e7d5      	b.n	80018bc <TIM7_IRQHandler+0x38>
	    y++;
 8001910:	3201      	adds	r2, #1
	    if( y >= YLINE ) y = 0;
 8001912:	2a31      	cmp	r2, #49	; 0x31
 8001914:	f04f 0501 	mov.w	r5, #1
 8001918:	ddf8      	ble.n	800190c <TIM7_IRQHandler+0x88>
 800191a:	2200      	movs	r2, #0
	    x = 0;
 800191c:	4613      	mov	r3, r2
 800191e:	e7cd      	b.n	80018bc <TIM7_IRQHandler+0x38>
 8001920:	20001a80 	.word	0x20001a80
 8001924:	40020800 	.word	0x40020800
 8001928:	200009f0 	.word	0x200009f0
 800192c:	20000a04 	.word	0x20000a04
 8001930:	20000a00 	.word	0x20000a00
 8001934:	20000009 	.word	0x20000009
 8001938:	200009fc 	.word	0x200009fc
 800193c:	2000123c 	.word	0x2000123c

08001940 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	490f      	ldr	r1, [pc, #60]	; (8001980 <SystemInit+0x40>)
 8001942:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <SystemInit+0x44>)
 8001950:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001952:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001954:	f042 0201 	orr.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800195a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001962:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001966:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <SystemInit+0x48>)
 800196a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001972:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001974:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001976:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800197a:	608b      	str	r3, [r1, #8]
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	40023800 	.word	0x40023800
 8001988:	24003010 	.word	0x24003010

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001992:	e003      	b.n	800199c <LoopCopyDataInit>

08001994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199a:	3104      	adds	r1, #4

0800199c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a4:	d3f6      	bcc.n	8001994 <CopyDataInit>
  ldr  r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a8:	e002      	b.n	80019b0 <LoopFillZerobss>

080019aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ac:	f842 3b04 	str.w	r3, [r2], #4

080019b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b4:	d3f9      	bcc.n	80019aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019b6:	f7ff ffc3 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f000 f811 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fd9d 	bl	80014fc <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019c8:	08001a78 	.word	0x08001a78
  ldr  r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d0:	200009d4 	.word	0x200009d4
  ldr  r2, =_sbss
 80019d4:	200009d4 	.word	0x200009d4
  ldr  r3, = _ebss
 80019d8:	20001ac0 	.word	0x20001ac0

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	4e0d      	ldr	r6, [pc, #52]	; (8001a18 <__libc_init_array+0x38>)
 80019e4:	4c0d      	ldr	r4, [pc, #52]	; (8001a1c <__libc_init_array+0x3c>)
 80019e6:	1ba4      	subs	r4, r4, r6
 80019e8:	10a4      	asrs	r4, r4, #2
 80019ea:	2500      	movs	r5, #0
 80019ec:	42a5      	cmp	r5, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	4e0b      	ldr	r6, [pc, #44]	; (8001a20 <__libc_init_array+0x40>)
 80019f2:	4c0c      	ldr	r4, [pc, #48]	; (8001a24 <__libc_init_array+0x44>)
 80019f4:	f000 f820 	bl	8001a38 <_init>
 80019f8:	1ba4      	subs	r4, r4, r6
 80019fa:	10a4      	asrs	r4, r4, #2
 80019fc:	2500      	movs	r5, #0
 80019fe:	42a5      	cmp	r5, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a08:	4798      	blx	r3
 8001a0a:	3501      	adds	r5, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a12:	4798      	blx	r3
 8001a14:	3501      	adds	r5, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	08001a70 	.word	0x08001a70
 8001a1c:	08001a70 	.word	0x08001a70
 8001a20:	08001a70 	.word	0x08001a70
 8001a24:	08001a74 	.word	0x08001a74

08001a28 <memset>:
 8001a28:	4402      	add	r2, r0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <memset+0xa>
 8001a30:	4770      	bx	lr
 8001a32:	f803 1b01 	strb.w	r1, [r3], #1
 8001a36:	e7f9      	b.n	8001a2c <memset+0x4>

08001a38 <_init>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	bf00      	nop
 8001a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3e:	bc08      	pop	{r3}
 8001a40:	469e      	mov	lr, r3
 8001a42:	4770      	bx	lr

08001a44 <_fini>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr
